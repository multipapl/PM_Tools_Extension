""" # üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤
EXTENSION_NAME = "papl_tools"  # –ù–∞–∑–≤–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
VERSION_FILE = "version.txt"   # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó
REPO_DIR = Path("C:/Blender_Extensions_Repo/packages")  # –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
EXTENSION_DIR = Path("Q:/_LIB/Blender/Papl_Tools")  # –ó–ê–ú–Ü–ù–ò –Ω–∞ —Å–≤—ñ–π —à–ª—è—Ö
INDEX_FILE = REPO_DIR / "index.json"  # –§–∞–π–ª index.json """

import os
import json
import hashlib
import zipfile
import toml

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
EXTENSION_NAME = "papl_tools"
REPO_DIR = r"C:/Blender_Extensions_Repo/packages"  # –î–µ –ª–µ–∂–∏—Ç—å index.json —Ç–∞ –∞—Ä—Ö—ñ–≤–∏
VERSION_FILE = os.path.join(REPO_DIR, "version.txt")  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó
INDEX_FILE = os.path.join(REPO_DIR, "index.json")  # –§–∞–π–ª index.json
EXTENSION_DIR = r"Q:/_LIB/Blender/Papl_Tools"  # –®–ª—è—Ö –¥–æ –∫–æ–¥—É —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
MANIFEST_FILE = os.path.join(EXTENSION_DIR, "blender_manifest.toml")  # –§–∞–π–ª blender_manifest.toml

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó ===
def get_current_version():
    if os.path.exists(VERSION_FILE):
        with open(VERSION_FILE, "r") as f:
            return f.read().strip()
    return "1.0.0"

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó ===
def increment_version(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return f"{major}.{minor}.{patch}"

current_version = get_current_version()
new_version = increment_version(current_version)

# === –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ—Ä—Å—ñ—é —É version.txt ===
with open(VERSION_FILE, "w") as f:
    f.write(new_version)

# === –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤–µ—Ä—Å—ñ—ó ===
manifest_version = new_version  # –ü—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é —è–∫ —Ä—è–¥–æ–∫

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —É blender_manifest.toml ===
if os.path.exists(MANIFEST_FILE):
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª
    with open(MANIFEST_FILE, "r", encoding="utf-8") as f:
        manifest_data = toml.load(f)

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
    manifest_data["schema_version"] = manifest_version
    manifest_data["version"] = manifest_version

    # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞–∑–∞–¥ —É —Ñ–∞–π–ª
    with open(MANIFEST_FILE, "w", encoding="utf-8") as f:
        toml.dump(manifest_data, f)

    print(f"üìù –û–Ω–æ–≤–ª–µ–Ω–æ blender_manifest.toml –¥–ª—è –≤–µ—Ä—Å—ñ—ó {new_version}")

# === –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∞—Ä—Ö—ñ–≤—É ===
zip_filename = f"{EXTENSION_NAME}-{new_version}.zip"
zip_path = os.path.join(REPO_DIR, zip_filename)

if os.path.exists(zip_path):
    os.remove(zip_path)

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ ZIP-–∞—Ä—Ö—ñ–≤—É ===
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
    for root, _, files in os.walk(EXTENSION_DIR):
        for file in files:
            file_path = os.path.join(root, file)
            arcname = os.path.relpath(file_path, EXTENSION_DIR)
            zipf.write(file_path, arcname)

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SHA256-—Ö–µ—à—É ===
def calculate_hash(file_path):
    sha256 = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(8192):
            sha256.update(chunk)
    return f"sha256:{sha256.hexdigest()}"

archive_hash = calculate_hash(zip_path)
archive_size = os.path.getsize(zip_path)

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è index.json ===
if os.path.exists(INDEX_FILE):
    with open(INDEX_FILE, "r", encoding="utf-8") as f:
        index_data = json.load(f)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
    index_data["data"][0]["version"] = new_version
    index_data["data"][0]["schema_version"] = new_version
    index_data["data"][0]["archive_url"] = f"./{zip_filename}"
    index_data["data"][0]["archive_size"] = archive_size
    index_data["data"][0]["archive_hash"] = archive_hash

    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π index.json
    with open(INDEX_FILE, "w", encoding="utf-8") as f:
        json.dump(index_data, f, indent=4, ensure_ascii=False)

    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {INDEX_FILE} –¥–ª—è –≤–µ—Ä—Å—ñ—ó {new_version}")

print(f"üì¶ –ê—Ä—Ö—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {zip_path}")
print(f"üìú Index.json –æ–Ω–æ–≤–ª–µ–Ω–æ: {INDEX_FILE}")
print(f"üìù blender_manifest.toml –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–µ—Ä—Å—ñ—ó {new_version}")
print("üîÑ –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É Blender.")

